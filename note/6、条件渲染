目录：
1、v-if 和 v-show
2、v-if 修饰的html标签含有子标签
3、v-else 补充
4、v-else-if
5、用 key 管理可复用的元素
6、v-show
7、v-if 与 v-for 一起使用




1、v-if 和 v-show
v-if 和 v-show   //if是渲染出Dom节点， v-show只是display:none
一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。
因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。

<h1 v-if="ok">Yes</h1>
<h1 v-else>No</h1>

2、v-if 修饰的html标签含有子标签
这样可以用一个v-if 标签 控制多个标签的使用     //其他的指令应该也是同理
//?? template 这个标签可能是一个特殊的存在
<template v-if="ok">    //tempalte 不会渲染到页面上
  <h1>Title</h1>
  <p>Paragraph 1</p>
  <p>Paragraph 2</p>
</template>

3、v-else 补充
<div v-if="Math.random() > 0.5">
  Now you see me
</div>
<div v-else>
  Now you don't
</div>

4、v-else-if
<div v-if="type === 'A'">
  A
</div>
<div v-else-if="type === 'B'">
  B
</div>
<div v-else-if="type === 'C'">
  C
</div>
<div v-else>
  Not A/B/C
</div>

5、用 key 管理可复用的元素
补充：如果没有显示的定义key，则所有相同标签名字的组件视为相同的key

好处：
    1) 可以复用已有元素，而不必重新渲染
    2) 在切换组件时候，可以恢复到之前曾经用过的，曾经被用户交互过的组件
        //仅限于A切换到B，B能使用A用过的组件；如果A1切换到B，B切换到A2，此时并不会复用到A1的元素

未使用key  //切换后，input切换时候，其上面的value值不会发生改变
<template v-if="loginType === 'username'">
  <label>Username</label>
  <input placeholder="Enter your username">
</template>
<template v-else>
  <label>Email</label>
  <input placeholder="Enter your email address">
</template

使用key
<template v-if="loginType === 'username'">
  <label>Username</label>
  <input placeholder="Enter your username" key="username-input">
</template>
<template v-else>
  <label>Email</label>
  <input placeholder="Enter your email address" key="email-input">
</template>

6、v-show
<h1 v-show="ok">Hello!</h1>     //切换display:none

7、v-if 与 v-for 一起使用
当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。




