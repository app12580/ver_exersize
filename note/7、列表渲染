
1、v-for
<ul id="example-1">
    <li v-for="item in items">
      {{ item.message }}
    </li>
  </ul>
data: {
    items: [
      { message: 'Foo' },
      { message: 'Bar' }
    ]
  }


2、v-for 的索引使用
<ul id="example-2">
  <li v-for="(item, index) in items">
    {{ parentMessage }} - {{ index }} - {{ item.message }}
  </li>
</ul>

3、item in items 和 item of items
你也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：
<div v-for="item of items"></div>

4、v-for 遍历对象
<ul id="v-for-object" class="demo">
  <li v-for="value in object">
    {{ value }}
  </li>
</ul>
new Vue({
  el: '#v-for-object',
  data: {
    object: {
      firstName: 'John',
      lastName: 'Doe',
      age: 30
    }
  }
})

5、v-for 遍历对象 key、 value、 索引
<div v-for="(value, key) in object">
  {{ key }}: {{ value }}
</div>

<div v-for="(value, key, index) in object">
  {{ index }}. {{ key }}: {{ value }}
</div>

//备注：在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。

6、v-for 中的key

<div v-for="item in items" :key="item.id">
  <!-- 内容 -->
</div>
为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。













