

1、 v-on监听事件 //内部js代码
<div id="example-1">
  <button v-on:click="counter += 1">Add 1</button>
  <p>The button above has been clicked {{ counter }} times.</p>
</div>

var example1 = new Vue({
  el: '#example-1',
  data: {
    counter: 0
  }
})

2、v-on 事件处理方法
<div id="example-2">
  <!-- `greet` 是在下面定义的方法名 -->
  <button v-on:click="greet">Greet</button>
</div>

var example2 = new Vue({
  el: '#example-2',
  data: {
    name: 'Vue.js'
  },
  // 在 `methods` 对象中定义方法
  methods: {
    greet: function (event) {
      // `this` 在方法里指向当前 Vue 实例
      alert('Hello ' + this.name + '!')
      // `event` 是原生 DOM 事件
      if (event) {
        alert(event.target.tagName)
      }
    }
  }
})

// 也可以用 JavaScript 直接调用方法
example2.greet() // => 'Hello Vue.js!'



3、内联处理器中的方法
//上一条是不带括号的调用方法，这个是带括号的显示调用方法
//注意：上一条可以方便的获取到event对象
<div id="example-3">
  <button v-on:click="say('hi')">Say hi</button>
  <button v-on:click="say('what')">Say what</button>
</div>
new Vue({
  el: '#example-3',
  methods: {
    say: function (message) {
      alert(message)
    }
  }
})

--内敛处理器的获取event方式:
<button v-on:click="warn('Form cannot be submitted yet.', $event)">
  Submit
</button>
// ...
methods: {
  warn: function (message, event) {
    // 现在我们可以访问原生事件对象
    if (event) event.preventDefault()
    alert(message)
  }
}

4、事件修饰符

程序设计思想：
在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。
尽管我们可以在方法中轻松实现这点，但更好的方式是：
方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。

事件修饰符：.stop  .prevent  .capture  .self  .once  .passive
<a v-on:click.stop="doThis"></a>    //阻止单击事件继续传播
<form v-on:submit.prevent="onSubmit"></form>    //提交事件不再重载页面
<a v-on:click.stop.prevent="doThat"></a>    //修饰符可以串联
<form v-on:submit.prevent></form>       //只有修饰符
<div v-on:click.capture="doThis">...</div>  //添加事件监听器时使用事件捕获模式
                                            //即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理
//详细说明：即是给元素添加一个监听器，当元素发生冒泡时，先触发带有该修饰符的元素。若有多个该修饰符，则由外而内触发。
  就是谁有该事件修饰符，就先触发谁。

<div v-on:click.self="doThat">...</div> //只当在 event.target 是当前元素自身时触发处理函数
                                        //即事件不是从内部元素触发的
<a v-on:click.once="doThis"></a>    //点击事件将只会触发一次
<div v-on:scroll.passive="onScroll">...</div>   //滚动事件的默认行为 (即滚动行为) 将会立即触发
    // 而不会等待 `onScroll` 完成      这其中包含 `event.preventDefault()` 的情况    不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。

5、修饰符的顺序
使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。
因此，用 v-on:click.prevent.self 会阻止所有的点击，
而 v-on:click.self.prevent 只会阻止对元素自身的点击。

6、按键修饰符
<input v-on:keyup.13="submit">  //只有在 `keyCode` 是 13 时调用 `vm.submit()'
别名：<input v-on:keyup.enter="submit">
缩写：<input @keyup.enter="submit">

--全部别名：
.enter  .tab  .delete (捕获“删除”和“退格”键)
.esc  .space  .up  .down  .left  .right

-- 自定义别名
// 可以使用 `v-on:keyup.f1`
Vue.config.keyCodes.f1 = 112

7、自动匹配按键修饰符     //翻译成人话： 可以把KeyboardEvent.key这里面的值作为修饰符
你也可直接将 KeyboardEvent.key 暴露的任意有效按键名转换为 kebab-case 来作为修饰符：
<input @keyup.page-down="onPageDown">
在上面的例子中，处理函数仅在 $event.key === 'PageDown' 时被调用。
有一些按键 (.esc 以及所有的方向键) 在 IE9 中有不同的 key 值, 如果你想支持 IE9，它们的内置别名应该是首选。


8、系统修饰符
    .ctrl     .alt     .shift      .meta(苹果系统)

<input @keyup.alt.67="clear">       //Alt + C
<div @click.ctrl="doSomething">Do something</div>   //Ctrl + Click

9、.exact 修饰符    //精确修饰符
<button @click.ctrl="onClick">A</button>    //即使 Alt 或 Shift 被一同按下时也会触发
<button @click.ctrl.exact="onCtrlClick">A</button>  //有且只有 Ctrl 被按下的时候才触发
<button @click.exact="onClick">A</button>   //没有任何系统修饰符被按下的时候才触发

10、鼠标按键修饰符
.left  .right  .middle
这些修饰符会限制处理函数仅响应特定的鼠标按钮。

11、为什么在 HTML 中监听事件?
1、扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。
2、因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。
3、当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。
        --第三条 是最大的优点




