目录：
1、v-model 的基本使用
2、值绑定
3、 .lazy 修饰符
4、 .number修饰符
5、 .trim
6、 v-model 和 组件一起使用


1、v-model 的基本使用
可以对<input>和<textarea>进行双向数据绑定，本质上是个语法糖

--单行文本
        <input v-model="message" placeholder="edit me">
        <p>Message is: {{ message }}</p>

--多行文本
<span>Multiline message is:</span>
<p style="white-space: pre-line;">{{ message }}</p>
<br>
<textarea v-model="message" placeholder="add multiple lines"></textarea>

//注意事项：在文本区域插值 (<textarea></textarea>) 并不会生效，应用 v-model 来代替。

--单个复选框
<input type="checkbox" id="checkbox" v-model="checked">
<label for="checkbox">{{ checked }}</label>

--多个复选框
<div id='example-3'>
  <input type="checkbox" id="jack" value="Jack" v-model="checkedNames">
  <label for="jack">Jack</label>
  <input type="checkbox" id="john" value="John" v-model="checkedNames">
  <label for="john">John</label>
  <input type="checkbox" id="mike" value="Mike" v-model="checkedNames">
  <label for="mike">Mike</label>
  <br>
  <span>Checked names: {{ checkedNames }}</span>
</div>
new Vue({
  el: '#example-3',
  data: {
    checkedNames: []
  }
})


--单选按钮
<div id="example-4">
  <input type="radio" id="one" value="One" v-model="picked">
  <label for="one">One</label>
  <br>
  <input type="radio" id="two" value="Two" v-model="picked">
  <label for="two">Two</label>
  <br>
  <span>Picked: {{ picked }}</span>
</div>
new Vue({
  el: '#example-4',
  data: {
    picked: ''
  }
})

--选择框
--单选时：

<div id="example-5">
  <select v-model="selected">
    <option disabled value="">请选择</option>
    <option>A</option>
    <option>B</option>
    <option>C</option>
  </select>
  <span>Selected: {{ selected }}</span>
</div>
new Vue({
  el: '...',
  data: {
    selected: ''
  }
})

注意： 编程习惯：
如果 v-model 表达式的初始值未能匹配任何选项，
<select> 元素将被渲染为“未选中”状态。
在 iOS 中，这会使用户无法选择第一个选项。
因为这样的情况下，iOS 不会触发 change 事件。
因此，更推荐像上面这样提供一个值为空的禁用选项。


--多选时：
<div id="example-6">
  <select v-model="selected" multiple style="width: 50px;">
    <option>A</option>
    <option>B</option>
    <option>C</option>
  </select>
  <br>
  <span>Selected: {{ selected }}</span>
</div>
new Vue({
  el: '#example-6',
  data: {
    selected: []
  }
})

--用 v-for 渲染的动态选项：
<select v-model="selected">
  <option v-for="option in options" v-bind:value="option.value">
    {{ option.text }}
  </option>
</select>
<span>Selected: {{ selected }}</span>
new Vue({
  el: '...',
  data: {
    selected: 'A',
    options: [
      { text: 'One', value: 'A' },
      { text: 'Two', value: 'B' },
      { text: 'Three', value: 'C' }
    ]
  }
})

2、值绑定
--绑定静态属性：
<input type="radio" v-model="picked" value="a"> //当选中时，`picked` 为字符串 "a"
<input type="checkbox" v-model="toggle">    //`toggle` 为 true 或 false
<select v-model="selected">
  <option value="abc">ABC</option>  //当选中第一个选项时，`selected` 为字符串 "abc"
</select>

--绑定动态属性：   //意思是说：可以当某一个变量为乱七八糟的时候，自定义根据值 来确定是否选中
                    //只能设置：true-value ：选中时候的值，  false-value: 未选中时候的value


--绑定 多选框
<input
  type="checkbox"
  v-model="toggle"
  true-value="yes"
  false-value="no"
>
vm.toggle === 'yes'       // 当选中时
vm.toggle === 'no'      // 当没有选中时

警告：     --翻译人话：checkbox只返回true和false，并不是"yes"或者"no"
这里的 true-value 和 false-value 特性并不会影响输入控件的 value 特性，
因为浏览器在提交表单时并不会包含未被选中的复选框。
如果要确保表单中这两个值中的一个能够被提交，(比如“yes”或“no”)，请换用单选按钮。

--绑定 单选框
<input type="radio" v-model="pick" v-bind:value="a">
vm.pick === vm.a        // 当选中时

-- 绑定选择框
<select v-model="selected">
  <option v-bind:value="{ number: 123 }">123</option>   //内联对象字面量
</select>
typeof vm.selected // => 'object'   // 当选中时
vm.selected.number // => 123


3、 .lazy 修饰符
在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步
(除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步：

<!-- 在“change”时而非“input”时更新 -->
<input v-model.lazy="msg" >


4、 .number修饰符

如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：
<input v-model.number="age" type="number">
这通常很有用，因为即使在 type="number" 时，HTML 输入元素的值也总会返回字符串。

5、 .trim
如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：

<input v-model.trim="msg">

6、 v-model 和 组件一起使用


